<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Articles on Lars Wiegman</title>
    <link>http://www.namsral.com/article/</link>
    <description>Recent content in Articles on Lars Wiegman</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>Copyright 2016 Lars Wiegman</copyright>
    <lastBuildDate>Tue, 04 Aug 2015 14:00:20 +0200</lastBuildDate>
    <atom:link href="http://www.namsral.com/article/feed/index.xml" rel="self" type="application/rss+xml" />
    
      
    <item>
      <title>Deploy and serve assets from a zip archive</title>
      <link>http://www.namsral.com/article/2015/08/04/deploy-and-serve-assets-from-a-zip-archive/</link>
      <pubDate>Tue, 04 Aug 2015 14:00:20 +0200</pubDate>
      
      <guid>http://www.namsral.com/article/2015/08/04/deploy-and-serve-assets-from-a-zip-archive/</guid>
      <description>&lt;p&gt;When going through the sourcecode of the &lt;a href=&#34;http://godoc.org/&#34; title=&#34;GoDoc&#34;&gt;godoc.org&lt;/a&gt; service I came upon this gem called the &lt;code&gt;zipfs&lt;/code&gt; package. From the docs:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Package zipfs file provides an implementation of the FileSystem interface based on the contents of a .zip file.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Combine this with the FileServer handler from the &lt;code&gt;net/http&lt;/code&gt; package and you&amp;rsquo;ll be able to serve your assets from a single zip archive.&lt;/p&gt;

&lt;p&gt;I wouldn&amp;rsquo;t recommend this strategy in production but it beats embedding your HTML templates, CSS files and your API docs in your Go code.&lt;/p&gt;

&lt;p&gt;The following is an example of a HTTP service which serves the contents of the given archive from the &lt;code&gt;/assets/&lt;/code&gt; path:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
    &amp;quot;archive/zip&amp;quot;
    &amp;quot;flag&amp;quot;
    &amp;quot;log&amp;quot;
    &amp;quot;net/http&amp;quot;

    &amp;quot;golang.org/x/tools/godoc/vfs/httpfs&amp;quot;
    &amp;quot;golang.org/x/tools/godoc/vfs/zipfs&amp;quot;
)

func main() {
    zipPath := flag.String(&amp;quot;zip&amp;quot;, &amp;quot;assets.zip&amp;quot;, &amp;quot;zip file containing assets&amp;quot;)
    httpAddr := flag.String(&amp;quot;http&amp;quot;, &amp;quot;localhost:6011&amp;quot;, &amp;quot;http address&amp;quot;)
    flag.Parse()

    r, err := zip.OpenReader(*zipPath)
    if err != nil {
        log.Fatal(err)
    }
    fs := zipfs.New(r, *zipPath)

    m := http.NewServeMux()
    m.Handle(&amp;quot;/assets/&amp;quot;, http.FileServer(httpfs.New(fs)))

    log.Print(&amp;quot;Listening on &amp;quot;, *httpAddr)
    if err := http.ListenAndServe(*httpAddr, m); err != nil {
        log.Fatal(&amp;quot;ListenAndServe:&amp;quot;, err)
    }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
      
    
      
    <item>
      <title>Random password generator</title>
      <link>http://www.namsral.com/article/2014/03/18/random-password-generator/</link>
      <pubDate>Tue, 18 Mar 2014 15:53:14 +0100</pubDate>
      
      <guid>http://www.namsral.com/article/2014/03/18/random-password-generator/</guid>
      <description>&lt;p&gt;I was updating a random password generator for a project, thought I&amp;rsquo;d share the resulting code. Also availabe as a &lt;a href=&#34;https://gist.github.com/namsral/9621883&#34;&gt;gist&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Using a default length of 14 characters this should generate passwords with 84 bits of entropy.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/usr/bin/env python
# -*- coding: utf-8 -*-

import os, string

def random_password(length=14):
    &amp;quot;&amp;quot;&amp;quot;
    Random password generator.

    Default generated password will have an entropy of 84 bits.

    For each character in the password, generate a random byte, reduce
    the integer value to modulo 64 and use the result as an index on
    the character pool.

    In a 64 character pool, each character will have an entropy of 6
    bits. With a lenght of 14 characters the total entropy is 84 bits:

        log2(64) * 14 = 84 bits

    The difference between 13 and 14 characters can be several years
    to brute force. &amp;quot;&amp;quot;&amp;quot;

    characters = string.ascii_letters + string.digits + &#39;+/&#39;

    l = list()
    for x in xrange(length):
        i = ord(os.urandom(1)) % len(characters)
        c = characters[i]
        l.append(c)
    return &#39;&#39;.join(l)

if __name__ == &#39;__main__&#39;:
    print(random_password())
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Generating passwords is easy, storing them safely seems to be more of a challenge.&lt;/p&gt;
</description>
    </item>
      
    
      
    <item>
      <title>Do more with the Caps lock key in OS X</title>
      <link>http://www.namsral.com/article/2014/03/17/do-more-with-the-caps-lock-key-in-os-x/</link>
      <pubDate>Mon, 17 Mar 2014 10:56:16 +0100</pubDate>
      
      <guid>http://www.namsral.com/article/2014/03/17/do-more-with-the-caps-lock-key-in-os-x/</guid>
      <description>&lt;p&gt;To most of us, the &lt;code&gt;Caps Lock&lt;/code&gt; key is useless and even annoying; waiting to be accidentally turned on and litter your input with caps. Which is a pity because considering its location and size it&amp;rsquo;s a convenient key to tap.&lt;/p&gt;

&lt;p&gt;By disabling the Caps lock functionality in OS X and using a third party app, the Caps lock key can become quite useful.&lt;/p&gt;

&lt;p&gt;For example, control &lt;a href=&#34;http://tmux.sourceforge.net&#34;&gt;tmux&lt;/a&gt;, on OS X version 10.9.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Disable the Caps lock key in OS X&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Launch the System Preferences app&lt;/li&gt;
&lt;li&gt;Navigate to the Keyboard panel, from the Keyboard tab click the &amp;ldquo;Modifier Keys&amp;hellip;&amp;rdquo; button&lt;/li&gt;
&lt;li&gt;Choose the &amp;ldquo;No Action&amp;rdquo; option for the Caps Lock Key&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Tapping the Caps lock key will now be ignored by OS X.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Remap the Caps lock key&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Because the Caps lock key isn&amp;rsquo;t a regular key, it can&amp;rsquo;t be configured by applications or OS X, we&amp;rsquo;ll need to remap it to a regular key, preferably one you rarely use, like &lt;code&gt;F19&lt;/code&gt;. &lt;a href=&#34;https://pqrs.org/macosx/keyremap4macbook/pckeyboardhack.html.en&#34;&gt;PCKeyboardHack&lt;/a&gt; allows us to do just that.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Download and install PCKeyboardHack matching your OS X version&lt;/li&gt;

&lt;li&gt;&lt;p&gt;After installing PCKeyboardHack you&amp;rsquo;ll need to restart OS X or load the kext manually:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo kextload /Applications/PCKeyboardHack.app/Contents/Library/PCKeyboardHack.10.9.signed.kext
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Note! Load the kext matching your OS X version.&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Launch the PCKeyboardHack app&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Change the keycode of the Caps Lock key to a key you don&amp;rsquo;t regularly use, like &lt;code&gt;F19&lt;/code&gt; which has keycode &lt;code&gt;80&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Tapping the Caps lock key will now invoke the F19 keycode.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Configure tmux to use Caps lock&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To use the remapped Caps lock key as a prefix for tmux, you&amp;rsquo;ll need to bind the F19.&lt;/p&gt;

&lt;p&gt;Add the following to your &lt;code&gt;~/.tmux.conf&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;unbind C-b
set-option -g prefix F19
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If tmux was already running, reload its configuration file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ tmux source-file ~/.tmux.conf
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Tapping Caps lock will be less of a strain on your finger than tapping Ctrl-b.&lt;/p&gt;
</description>
    </item>
      
    
      
    <item>
      <title>Dennis the DNS menace</title>
      <link>http://www.namsral.com/article/2014/03/07/dennis-the-dns-menace/</link>
      <pubDate>Fri, 07 Mar 2014 14:36:49 +0100</pubDate>
      
      <guid>http://www.namsral.com/article/2014/03/07/dennis-the-dns-menace/</guid>
      <description>&lt;p&gt;Just pushed a new project to Github, it&amp;rsquo;s just a small piece of a live project as I&amp;rsquo;m usually not at liberty to open-source production code.&lt;/p&gt;

&lt;p&gt;The project is called Dennis. It&amp;rsquo;s a nameserver which can serve customised DNS responses on a per user basis. It&amp;rsquo;s written in the &lt;a href=&#34;http://golang.org&#34; title=&#34;Go Programming Language&#34;&gt;Go programming language&lt;/a&gt; and uses Redis as a fast datastore.&lt;/p&gt;

&lt;p&gt;On its own Dennis isn&amp;rsquo;t very useful but by adding a DNS recursor and a HTTP(S) proxy, Dennis can bypass geo-blocking for thousands of users. It works by identifying users by their IP address, and each user can setup an unlimited number of custom DNS responses.&lt;/p&gt;

&lt;p&gt;For a more elaborate description see the project on Github, &lt;a href=&#34;https://github.com/namsral/dennis&#34; title=&#34;Dennis the DNS menace&#34;&gt;github.com/namsral/dennis&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
      
    
      
    <item>
      <title>Tag cached responses with uWSGI</title>
      <link>http://www.namsral.com/article/2014/03/04/tag-cached-responses-with-uwsgi/</link>
      <pubDate>Tue, 04 Mar 2014 12:45:39 +0100</pubDate>
      
      <guid>http://www.namsral.com/article/2014/03/04/tag-cached-responses-with-uwsgi/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/unbit/uwsgi&#34;&gt;uWSGI&lt;/a&gt; is a powerful application server but the &lt;a href=&#34;http://uwsgi-docs.readthedocs.org/en/latest/&#34;&gt;documentation&lt;/a&gt; can be light on some subjects like caching.&lt;/p&gt;

&lt;p&gt;If you want distinguish cache hits from misses you can use the &lt;code&gt;incache:key=&lt;/code&gt; condition. Using the following uWSGI configuration will add a &lt;code&gt;X-Cache&lt;/code&gt; header to each response.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[uwsgi]

...

; Enable caching
mime-file = /etc/mime.types
cache2 = name=%n-cache,items=100

; Check if URI is cached
route-if = incache:key=${REQUEST_URI},name=%n-cache goto:cache_hit

; Cache MISS
route-label = cache_miss
route-run = addheader:X-Cache: MISS
route-run = cachestore:key=${REQUEST_URI},name=%n-cache,expires=172800
route-run = last:

; Cache HIT
route-label = cache_hit
route-run = addheader:X-Cache: HIT
route-run = cache:key=${REQUEST_URI},name=%n-cache,mime=1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Requesting the same URI twice in a row will tag the response accordingly and add an additional Expires header.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ curl -I -X GET http://namsral.com/
    HTTP/1.1 200 OK
    ...
    X-Cache: MISS

$ curl -I -X GET http://namsral.com/
    HTTP/1.1 200 OK
    ...
    Expires: Thu, 06 Mar 2014 11:11:14 GMT
    X-Cache: HIT
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
      
    
      
    <item>
      <title>Apple, Drinks And Mad Men</title>
      <link>http://www.namsral.com/article/2012/04/04/apple-drinks-and-mad-men/</link>
      <pubDate>Wed, 04 Apr 2012 20:29:20 +0200</pubDate>
      
      <guid>http://www.namsral.com/article/2012/04/04/apple-drinks-and-mad-men/</guid>
      <description>&lt;p&gt;Three great things captured in a single picture, I added the drinks myself: &lt;a href=&#34;http://www.namsral.com/assets/mad-men-apple-advert.jpg&#34;&gt;Having drinks and ideas worth sharing&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Credit goes to James Minchin III for his awesome &lt;a href=&#34;http://everyday-i-show.livejournal.com/151834.html&#34;&gt;behind the scenes at Mad Men&lt;/a&gt; photo collection.&lt;/p&gt;
</description>
    </item>
      
    
      
    <item>
      <title>Enable Copy-Paste in iTunes Connect</title>
      <link>http://www.namsral.com/article/2012/04/03/enable-copy-paste-in-itunes-connect/</link>
      <pubDate>Tue, 03 Apr 2012 21:55:20 +0200</pubDate>
      
      <guid>http://www.namsral.com/article/2012/04/03/enable-copy-paste-in-itunes-connect/</guid>
      <description>&lt;p&gt;Got fed up with typing my password in iTunes Connect every time because the form won&amp;rsquo;t let me copy/paste it. Not sure why Apple is making this more difficult than it has to be.&lt;/p&gt;

&lt;p&gt;To circumvent the annoyance you can either disable Javascript or override the &lt;code&gt;onpaste&lt;/code&gt; function in the password input field and have it return true instead of false:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;document.getElementsByName(&#39;theAccountPW&#39;)[0].onpaste = function() {
    return true
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you can turn that script in a bookmarklet by prepending it with &amp;ldquo;javascript:&amp;ldquo;.&lt;/p&gt;
</description>
    </item>
      
    
      
    <item>
      <title>A Scene With Ashton Kutcher As Steve Jobs  </title>
      <link>http://www.namsral.com/article/2012/04/02/a-scene-with-ashton-kutcher-as-steve-jobs/</link>
      <pubDate>Mon, 02 Apr 2012 23:53:20 +0200</pubDate>
      
      <guid>http://www.namsral.com/article/2012/04/02/a-scene-with-ashton-kutcher-as-steve-jobs/</guid>
      <description>&lt;p&gt;Ashton Kutcher as Steve Jobs in a board meeting, August 1997:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Ed Woolard, Gareth Chang, you can stay, everyone else is getting punk&amp;rsquo;d!&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
      
    
      
    <item>
      <title>The iPad Mini Would Have the PPI Of An Older iPhone</title>
      <link>http://www.namsral.com/article/2012/03/29/the-ipad-mini-would-have-the-ppi-of-an-older-iphone/</link>
      <pubDate>Thu, 29 Mar 2012 00:39:20 +0200</pubDate>
      
      <guid>http://www.namsral.com/article/2012/03/29/the-ipad-mini-would-have-the-ppi-of-an-older-iphone/</guid>
      <description>&lt;p&gt;Following the rumors of the iPad Mini, A.T. Faust at AppAdvice makes a &lt;a href=&#34;http://www.appadvice.com/appnn/2012/03/apple-has-163-reasons-to-release-fabled-ipad-mini&#34;&gt;good argument&lt;/a&gt; why 7.85 inch would be a good size for an iPad.&lt;/p&gt;

&lt;p&gt;But keeping the same resolution of 1024 x 768 and shrinking the screen size by 20% would have a negative effect on the effective touch surface area. Interface elements like buttons would become to small to touch. Apple&amp;rsquo;s &lt;a href=&#34;http://developer.apple.com/library/ios/#documentation/UserExperience/Conceptual/MobileHIG/Introduction/Introduction.html&#34;&gt;Human Interface Guidelines&lt;/a&gt; recommends a minimum touch surface area of 44 x 44 points, 88 x 88 points for the newer generation iOS devices with a higher pixel density.&lt;/p&gt;

&lt;p&gt;But how many inches of the screen should your finger cover to interact with the interface? The math says, 0.33 inches for iPads:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;iPad 1st/2nd generation: 44 points / 132 ppi = 0.33 inch
iPad 3rd generation: 88 points / 264 ppi = 0.33 inch
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And 0.27 inches for the iPhones, regardless of the higher pixel density on the newer models:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;iPhone 4/4S: 88 points / 326 ppi = 0.27 inch
iPhone 2G/3G/3GS: 44 points / 163 ppi = 0.27 inch
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So if the iPad Mini would have a 7.85 inch screen with a resolution of 1024 x 768 pixels it would have a touch surface area equivalent to an iPhone 3GS:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;iPad Mini: 44 points / 163 ppi = 0.27 inch
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This makes the rumored iPad size at least more plausible because it follows Apple&amp;rsquo;s &lt;a href=&#34;http://developer.apple.com/library/ios/#documentation/UserExperience/Conceptual/MobileHIG/Introduction/Introduction.html&#34;&gt;Human Interface Guidelines&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;But I&amp;rsquo;m still sceptical. Apple has been upgrading all of its iOS devices with higher ppi displays since the iPhone 4, followed by the iPod Touch and now the 3rd generation iPad. Even OS X, with Mountain Lion, is headed to support high ppi displays.&lt;/p&gt;

&lt;p&gt;Releasing a new iPad with old technology doesn&amp;rsquo;t make a whole lot of sense to me. Apple is notorious for moving forwards regarding technology, not backwards, but who knows.&lt;/p&gt;
</description>
    </item>
      
    
      
    <item>
      <title>Apple&#39;s And Proview&#39;s iPad Dispute</title>
      <link>http://www.namsral.com/article/2012/02/28/apples-and-proviews-ipad-dispute/</link>
      <pubDate>Tue, 28 Feb 2012 16:13:20 +0100</pubDate>
      
      <guid>http://www.namsral.com/article/2012/02/28/apples-and-proviews-ipad-dispute/</guid>
      <description>&lt;p&gt;Interesting turn of events in Apple&amp;rsquo;s and Proview&amp;rsquo;s iPad dispute.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;1998, May: Apple unveils the &lt;a href=&#34;http://lowendmac.com/imacs/rev-a-imac-g3-233-mhz.html&#34; title=&#34;The Original iMac (Rev. A)&#34;&gt;iMac&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;1999, Jul: Apple unveils the iBook&lt;/li&gt;
&lt;li&gt;2000, Aug: Proview releases the &lt;a href=&#34;http://www.theverge.com/2012/2/18/2808226/proview-ipad-computer-specs-pictures&#34; title=&#34;Proview&#39;s iPAD computer revealed&#34;&gt;iPad&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;2009, Dec: Apple acquires worldwide iPad trademark from Proview for $55k through a shell company called IP Application Development, IPAD Ltd for short&lt;/li&gt;
&lt;li&gt;2010, Jan: Apple announces the iPad&lt;/li&gt;
&lt;li&gt;2011, Oct: Proview demands $800M from Apple to use the iPad trademark in China&lt;/li&gt;
&lt;li&gt;2011, Dec: Apple loses right to use the iPad trademark in China&lt;/li&gt;
&lt;li&gt;2012, Jan: Proview loses battle to ban iPad in China&lt;/li&gt;
&lt;li&gt;2012, Feb: Proview &lt;a href=&#34;http://www.reuters.com/article/2012/02/27/idUS191950+27-Feb-2012+PRN20120227&#34; title=&#34;Proview Taiwan Charges Apple with Fraud and Unfair Competition&#34;&gt;charges&lt;/a&gt; Apple with fraud and unfair competition in iPad trademark acquisition&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Notice that Apple&amp;rsquo;s iMac and iBook preceded Proview&amp;rsquo;s iPad and how &lt;a href=&#34;http://www.theverge.com/2012/2/18/2808226/proview-ipad-computer-specs-pictures&#34; title=&#34;Proview&#39;s iPAD computer revealed&#34;&gt;Proview&amp;rsquo;s iPad&lt;/a&gt; looks awfully similar to &lt;a href=&#34;http://lowendmac.com/imacs/rev-a-imac-g3-233-mhz.html&#34; title=&#34;The Original iMac (Rev. A)&#34;&gt;Apple&amp;rsquo;s iMac&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
      
    
      
    <item>
      <title>The New Ubuntu HUD</title>
      <link>http://www.namsral.com/article/2012/01/26/the-new-ubuntu-hud/</link>
      <pubDate>Thu, 26 Jan 2012 01:36:20 +0100</pubDate>
      
      <guid>http://www.namsral.com/article/2012/01/26/the-new-ubuntu-hud/</guid>
      <description>&lt;p&gt;The new Ubuntu HUD resembles a product Aza Raskin developed a while back for Windows. It&amp;rsquo;s called &lt;a href=&#34;http://www.humanized.com/enso/tour/&#34; title=&#34;Enso Launcher Tour&#34;&gt;Enso Launcher&lt;/a&gt; and has similar functionality. Besides launching apps it could control apps, manipulate text and do simple calculations as is shown in this &lt;a href=&#34;http://www.namsral.com/assets/enso_launcher_example.jpg&#34; title=&#34;Enso Launcher Screenshot&#34;&gt;screenshot&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A similar feature exists in Mac OS X and it&amp;rsquo;s especially helpful when controlling a Mac with a keyboard. It works and looks similar to spotlight. To use it, hit the following key combo and start typing:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Command + Shift + /
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
      
    
      
    <item>
      <title>Google Needs to Prioritize Native Apps</title>
      <link>http://www.namsral.com/article/2011/12/14/google-needs-to-prioritize-native-apps/</link>
      <pubDate>Wed, 14 Dec 2011 13:46:20 +0100</pubDate>
      
      <guid>http://www.namsral.com/article/2011/12/14/google-needs-to-prioritize-native-apps/</guid>
      <description>&lt;p&gt;Most popular online services find their way to a mobile platform via iOS and eventually add support for Android. Some online services even start out as an iOS app like &lt;a href=&#34;http://instagr.am/&#34; title=&#34;Instagram Homepage&#34;&gt;Instagram&lt;/a&gt; or remain entirely iOS exclusive like &lt;a href=&#34;https://path.com/&#34; title=&#34;Path Homepage&#34;&gt;Path&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As the Android platform grows and has recently surpassed the iOS platform in marketshare, 45% vs 27% in the US according to a &lt;a href=&#34;http://www.comscore.com/Press_Events/Press_Releases/2011/11/comScore_Reports_September_2011_U.S._Mobile_Subscriber_Market_Share&#34;&gt;Comscore report&lt;/a&gt;, developers remain to prefer iOS
as a first release platform.&lt;/p&gt;

&lt;p&gt;This to dismay of Eric Schmidt which has recently called developers to prioritize Android:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Whether you like ICS or not, and again I like it a great deal, you will want to develop for that platform, and perhaps even first.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;What is keeping developers from prioritizing Android is what many already have speculated. And now has been backed up by numbers from analytics firm Flurry Analytics. Their &lt;a href=&#34;http://blog.flurry.com/bid/79061/App-Developers-Bet-on-iOS-over-Android-this-Holiday-Season&#34;&gt;revenue analysis&lt;/a&gt; prove iOS to be roughly 4x more profitable per app. This is despite the larger market share of the Android platform.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s up for speculation what makes the iOS platform more profitable but Google&amp;rsquo;s stance towards apps and selling them through an app store is certainly not improving the matter. Google&amp;rsquo;s own priority lies with the Web and not with native apps. An excerpt from an &lt;a href=&#34;http://news.cnet.com/8301-30684_3-20030589-265.html&#34;&gt;article posted by CNET&lt;/a&gt; in February to prove my point:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Google&amp;rsquo;s philosophy of pushing Web development over native software development when possible, a strategy that isn&amp;rsquo;t always practical on smartphones but is starting to make more sense as computing power grows in tablets.&lt;/p&gt;

&lt;p&gt;Google&amp;rsquo;s quest in this world is to one day replace software developed for specific machines with software developed on and for the Web.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And for most mobile users the web is something that is free to use, albeit paid by ads or your privacy. Contrary to native apps for which users pay for in an app store.&lt;/p&gt;

&lt;p&gt;If Eric Schmidt really wants developers to prioritize the Android platform, Google itself has to prioritize native apps.&lt;/p&gt;

&lt;p&gt;As a developer you have limited resources and need to prioritize in order to succeed and starting to develop for the most profitable platform makes a lot of sense.&lt;/p&gt;
</description>
    </item>
      
    
      
    <item>
      <title>How Steve Jobs Will Be Remembered</title>
      <link>http://www.namsral.com/article/2011/10/06/how-steve-jobs-will-be-remembered/</link>
      <pubDate>Thu, 06 Oct 2011 10:34:20 +0200</pubDate>
      
      <guid>http://www.namsral.com/article/2011/10/06/how-steve-jobs-will-be-remembered/</guid>
      <description>&lt;p&gt;Barack Obama, via &lt;a href=&#34;http://allthingsd.com/20111005/barack-obama-on-steve-jobs/&#34;&gt;AllThinsD&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;And there may be no greater tribute to Steve’s success than the fact that much of the world learned of his passing on a device he invented.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Larry Page, CEO at Google, via &lt;a href=&#34;https://plus.google.com/u/1/106189723444098348646/posts/4wkYwTCCgAc&#34;&gt;Goolge+&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;He was very kind to reach out to me as I became CEO of Google and spend time offering his advice and knowledge even though he was not at all well.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Lakshan Perera, via &lt;a href=&#34;http://laktek.com/2011/10/06/thank-you-steve/&#34;&gt;LakTEK&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Steve’s life was not bed of roses. As a child he was adopted, he had to drop-out from the University, was kicked out from his own company and lived the best years of his life battling with Pancreatic cancer. Yet he managed to “put a ding in the universe”.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Steve Jobs himself, in a &lt;a href=&#34;http://www.youtube.com/watch?v=UF8uR6Z6KLc&#34;&gt;speech&lt;/a&gt; at Stanford University:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;hellip;death is the destination we all share. No one has ever escaped it. And that is as it should be, because Death is very likely the single best invention of Life. It is Life&amp;rsquo;s change agent. It clears out the old to make way for the new. Right now the new is you, but someday not too long from now, you will gradually become the old and be cleared away. Sorry to be so dramatic, but it is quite true.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;He will be missed.&lt;/p&gt;
</description>
    </item>
      
    
      
    <item>
      <title>Personal URL Shortener In Three Lines Of Code</title>
      <link>http://www.namsral.com/article/2011/04/23/personal-url-shortener-in-three-lines-of-code/</link>
      <pubDate>Sat, 23 Apr 2011 02:28:20 +0200</pubDate>
      
      <guid>http://www.namsral.com/article/2011/04/23/personal-url-shortener-in-three-lines-of-code/</guid>
      <description>&lt;p&gt;Having your own URL shortener service has some benefits over using a third party service. To name two: more exposure for your personal domain and full access to web traffic data. But if, for whatever reason, you don&amp;rsquo;t want to host your own here is a quick hack using the Nginx webserver.&lt;/p&gt;

&lt;p&gt;Choose a reliable URL shortener service. I&amp;rsquo;m betting on Google&amp;rsquo;s service at &lt;a href=&#34;http://goo.gl/&#34; title=&#34;Google&#39;s URL Shortener&#34;&gt;http://goo.gl/&lt;/a&gt;. Add the following three lines to the server section of your Nginx configuration:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;location ~ /u/(.*)$ {
    rewrite ^/u/(.*)/?$ http://goo.gl/$1 redirect;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Generate a shortened URL at &lt;a href=&#34;http://goo.gl/&#34; title=&#34;Google&#39;s URL Shortener&#34;&gt;http://goo.gl/&lt;/a&gt; and replace the goo.gl domain with your own. In my case:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http://goo.gl/nlthH &amp;gt; http://namsral.com/u/nlthH
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When users click on your shortened URL they will be redirected to Google&amp;rsquo;s shortened URL which in turn will redirect users to their final destination. This all happens in a flash, &lt;a href=&#34;http://namsral.com/u/nlthH&#34;&gt;try it&lt;/a&gt; .&lt;/p&gt;

&lt;p&gt;By adding a unique path to your shortened URLs you&amp;rsquo;ll be able to differentiate them from  other content on your site. Now using grep you can quickly scan through the Nginx logs for clicks:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;grep &#39;/u/&#39; /var/log/nginx/namsral.com.access.log
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
      
    
      
    <item>
      <title>Lost In App Store Limbo</title>
      <link>http://www.namsral.com/article/2011/04/20/lost-in-app-store-limbo/</link>
      <pubDate>Wed, 20 Apr 2011 01:43:20 +0200</pubDate>
      
      <guid>http://www.namsral.com/article/2011/04/20/lost-in-app-store-limbo/</guid>
      <description>&lt;p&gt;The &amp;ldquo;Release soon, release often&amp;rdquo; and &amp;ldquo;Incremental improvements&amp;rdquo; mantras often spoken of by web application publishers do not apply to iOS apps. iOS apps need to be washed and groomed to perfection before they are released to the App Store horde.&lt;/p&gt;

&lt;p&gt;The majority of apps released in the App Store get one chance at making a splash. If it fails to generate enough downloads or develop a large enough user base to get picked up by the general public the app is forever lost in limbo.&lt;/p&gt;
</description>
    </item>
      
    
  </channel>
</rss>